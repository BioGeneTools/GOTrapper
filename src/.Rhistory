estimateSizeFactors
estimateDispersions()
estimateDispersions
showMethods("estimateDispersions")
estimateSizeFactorsForMatrix
nbinomTest
nbinomTestForMatrices
?t
data("iris")
iris.na <- iris
View(iris)
View(iris.na)
set.seed(111)
?set.seed
for (i in 1:4) iris.na[sample(150, sample(20)), i] <- NA
i
iris.roughfix <- na.roughfix(iris.na)
install.packages(randomForest)
install.packages("randomForest")
iris.roughfix <- na.roughfix(iris.na)
library(randomForest)
rfNews()
iris.roughfix <- na.roughfix(iris.na)
View(iris.roughfix)
na.roughfix()
?na.roughfix()
View(iris.roughfix)
iris.narf <- randomForest(Species ~ ., iris.na, na.action=na.roughfix)
iris.narf
print(iris.narf)
library(DESeq)
nbinomTest()
nbinomTest
nbinomTestForMatrices()
nbinomTestForMatrices
?dnbinom
x <- 0:11
dnbinom(x, size = 1, prob = 1/2) * 2^(1 + x) # == 1
126 /  dnbinom(0:8, size  = 2, prob  = 1/2) #- theoretically integer
dnbinom(x, size = 1, prob = 1/2) * 2^(1 + x)
library(edgeR)
library("edgeR")
library("DESeq")
estimateDispersions()
estimateDispersions
showMethods("estimateDispersions")
set.seed(1)
x=matrix(rnorm(20*2), ncol=2)
View(x)
y=c(rep(-1,10), rep(1,10))
y
x[y==1,]=x[y==1,] + 1
View(x)
y
x
plot(x, col=(3-y))
install.packages("e1071")
library("e1071")
dat=data.frame(x=x, y=as.factor(y))
View(dat)
library(e1071)
svmfit=svm(y∼., data=dat, kernel="linear", cost=10,scale=FALSE)
svmfit=svm(y~., data=dat, kernel="linear", cost=10,scale=FALSE)
svmfit
plot(svmfit , dat)
svmfit$kernel
svmfit$x.scale
svmfit$coef0
svmfit$index
svmfit=svm(y~., data=dat, kernel="linear", cost=0.1, scale=FALSE)
plot(svmfit , dat)
svmfit=svm(y~., data=dat, kernel="linear", cost=2.1, scale=FALSE)
plot(svmfit , dat)
svmfit=svm(y~., data=dat, kernel="linear", cost=20.1, scale=FALSE)
plot(svmfit , dat)
svmfit=svm(y~., data=dat, kernel="linear", cost=200, scale=FALSE)
plot(svmfit , dat)
svmfit=svm(y~., data=dat, kernel="linear", cost=0.001, scale=FALSE)
plot(svmfit , dat)
svmfit$index
set . seed (1)x=matrix(rnorm(200*2), ncol=2)x[1:100,]=x[1:100,]+2x[101:150,]=x[101:150,]-2y=c(rep(1,150),rep(2,50))dat=data.frame(x=x,y=as.factor(y))
set . seed (1)
x=matrix(rnorm(200*2), ncol=2)
set.seed (1)
x=matrix(rnorm(200*2), ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x,y=as.factor(y))
plot(x, col=y)
train=sample(200,100)
svmfit=svm(y∼., data=dat[train,], kernel="radial", gamma=1,
cost =1)
plot(svmfit , dat[train ,])
svmfit=svm(y~., data=dat[train,], kernel="radial", gamma=1,cost =1)
plot(svmfit , dat[train ,])
svmfit=svm(y∼., data=dat[train,], kernel="radial",gamma=1, cost=1e5)
svmfit=svm(y~., data=dat[train,], kernel="radial",gamma=1, cost=1e5)
plot(svmfit ,dat[train ,])
table(true=dat[-train,"y"], pred=predict(tune.out$best.model, newx=dat[-train ,]))
tune.out=tune(svm, y∼., data=dat[train,], kernel="radial",              ranges=list(cost=c(0.1,1,10,100,1000),                          gamma=c(0.5,1,2,3,4) ))
tune.out=tune(svm, y∼., data=dat[train,], kernel="radial",ranges=list(cost=c(0.1,1,10,100,1000),gamma=c(0.5,1,2,3,4) ))
tune.out=tune(svm, y~., data=dat[train,], kernel="radial",ranges=list(cost=c(0.1,1,10,100,1000),gamma=c(0.5,1,2,3,4) ))
dt = replicate(3, rnorm(4))
rbf <- rbfdot(sigma = 0.05)
kernelMatrix(rbf, dt)
install.packages(kernlab)
install.packages("kernlab")
source("https://bioconductor.org/biocLite.R")
biocLite("kernlab")
library(kernlab)
R version
rbf <- rbfdot(sigma = 0.05)
kernelMatrix(rbf, dt)
rbf
cor(dt)
plot(cor(dt))
library(lattice)
splom(mtcars[c(1,3,5,6)], groups=cyl, data=mtcars,
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=3,
points=list(pch=super.sym$pch[1:3],
col=super.sym$col[1:3]),
text=list(c("4 Cylinder","6 Cylinder","8 Cylinder"))))
splom(dt)
splom(cor(dt))
dt = replicate(3, rnorm(40))
dt
dt = replicate(13, rnorm(40))
dt
splom(cor(dt))
splom(dt)
dt = replicate(3, rnorm(40))
splom(dt)
splom(cor(dt))
attach(mtcars)
plot(wt, mpg, main="Scatterplot Example",
xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
scatterplot(mpg ~ wt | cyl, data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
splom(mtcars[c(1,3,5,6)], groups=cyl, data=mtcars,
panel=panel.superpose,
key=list(title="Three Cylinder Options",
columns=3,
points=list(pch=super.sym$pch[1:3],
col=super.sym$col[1:3]),
text=list(c("4 Cylinder","6 Cylinder","8 Cylinder"))))
source("https://bioconductor.org/biocLite.R")
biocLite("corrgram")
library(corrgram)
corrgram(dt, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
corrgram(mtcars, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
dt = replicate(13, rnorm(40))
corrgram(dt, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
corrgram(dt, order=NULL, lower.panel=panel.shade,
upper.panel=NULL, text.panel=panel.txt,
main="Car Milage Data (unsorted)")
library(corrplot)
cor.prob <- function (X, dfr = nrow(X) - 2) {
R <- cor(X, use="pairwise.complete.obs")
above <- row(R) < col(R)
r2 <- R[above]^2
Fstat <- r2 * dfr/(1 - r2)
R[above] <- 1 - pf(Fstat, 1, dfr)
R[row(R) == col(R)] <- NA
R
}
## Use this to dump the cor.prob output to a 4 column matrix
## with row/column indices, correlation, and p-value.
## See StackOverflow question: http://goo.gl/fCUcQ
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
mydata <- mtcars[, c(1,3,4,5,6)]
# correlation matrix
cor(mydata)
# correlation matrix with p-values
cor.prob(mydata)
flattenSquareMatrix(cor.prob(mydata))
library(PerformanceAnalytics)
source("https://bioconductor.org/biocLite.R")
biocLite("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.Correlation(mydata)
chart.Correlation(dt)
dt = replicate(3, rnorm(6))
chart.Correlation(dt)
dt = replicate(3, rnorm(18))
chart.Correlation(dt)
dt = replicate(18, rnorm(18))
chart.Correlation(dt)
dt = replicate(5, rnorm(24))
dt = replicate(, rnorm(15))
dt = replicate(, rnorm(15))
dt = replicate(4, rnorm(15))
chart.Correlation(dt)
TheFile <- read.csv(tmpp.csv,header = FALSE, sep = "\t")
getwd()
getwd()
x<-c(0 ,0, 0 ,0 ,0 ,1 ,2 ,4 ,6 ,8 ,11, 14, 16, 18, 19, 21,21, 21, 21, 21, 20, 19, 19, 18, 17, 16, 15, 15, 14, 13, 13, 12,11, 11, 10, 10, 9 ,9 ,8, 7, 7, 6, 6, 6, 5, 5, 5, 5,5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,4, 5, 5, 6, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19)
hist(x)
hist(density(x))
hist(x,density(x))
line(density(x))
hist(x)
line(density(x))
hist(x, probability =TRUE)
strsplit("0 0 0 0 2 4 8 13 19 25 30 33 35 34 33 30
27 23 20 18 15 13 12 10 10 10 10 10 10 10 11 12
14 16 17 18 19 21 22 24 26 28 29 29 29 29 28 29
29 29 28 26 24 22 19 17 15 13 12 10 9 7 6 5
4 3 2 2 1 1 1 0 0 0 0 0 0 0 0 0")
unlist(strsplit("a.b.c", "."))
strsplit("0 0 0 0 2 4 8 13 19 25 30 33 35 34 33 30 27 23 20 18 15 13 12 10 10 10 10 10 10 10 11 12 14 16 17 18 19 21 22 24 26 28 29 29 29 29 28 29 29 29 28 26 24 22 19 17 15 13 12 10 9 7 6 5 4 3 2 2 1 1 1 0 0 0 0 0 0 0 0 0"," ")
x <- strsplit("0 0 0 0 2 4 8 13 19 25 30 33 35 34 33 30 27 23 20 18 15 13 12 10 10 10 10 10 10 10 11 12 14 16 17 18 19 21 22 24 26 28 29 29 29 29 28 29 29 29 28 26 24 22 19 17 15 13 12 10 9 7 6 5 4 3 2 2 1 1 1 0 0 0 0 0 0 0 0 0"," ")
hist(x)
b <- as.numeric(x)
noquote(x)
b <- noquote(x)
b
hist(b)
hist(as.numeric(b))
as.numeric(unlist(x))
b<- as.numeric(unlist(x))
hist(b)
library("devtools")
version
devtools::install_github('hfgolino/EGA')
library("EGA")
getwd()
load("dataa.Rda")
cormatrix <- cor_auto(data)
ega<-EGA(data, plot.EGA = TRUE)
library("graph")
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
library("graph")
ega<-EGA(data, plot.EGA = TRUE)
biocLite("qgraph")
library("qgraph")
library("graph")
library("ega")
library("EGA")
source("https://bioconductor.org/biocLite.R")
biocLite("Lavaan")
library("lavaan")
ega<-EGA(data, plot.EGA = TRUE)
library("qgraph")
version
library("EGA")
library("qgraph")
source("https://bioconductor.org/biocLite.R")
biocLite("qgraph")
library("qgraph")
biocLite("nlme")
library("qgraph")
biocLite("nlme")
library("nlme")
install.packages("qgraph")
library("qgraph")
install.packages("nlme")
library("qgraph")
library("qgraph")
library("nlme")
install.packages("nlme")
library("nlme")
library("qgraph")
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
library("qgraph")
library("EGA")
ega<-EGA(data, plot.EGA = TRUE)
group.spinglass<- list(c(1:7), c(8,17,18), c(9,12,13,14,19,20), c(10,11), c(15,16))
group.ega<- list(c(1:7), c(8,15,16), c(10,11), c(17,18,20), c(9,12:14,19))
par(mfrow = c(1, 2))
graph4 <- qgraph(cormatrix, graph="glasso", layout="spring", sampleSize = nrow(data),groups=group.ega,
vsize=7, cut=0, maximum=.45, border.width=1.5,
color=c("red", "green", "blue", "orange", "white"), title="ega walktrap")
library("graph")
group.spinglass<- list(c(1:7), c(8,17,18), c(9,12,13,14,19,20), c(10,11), c(15,16))
group.ega<- list(c(1:7), c(8,15,16), c(10,11), c(17,18,20), c(9,12:14,19))
par(mfrow = c(1, 2))
graph4 <- qgraph(cormatrix, graph="glasso", layout="spring", sampleSize = nrow(data),groups=group.ega,
vsize=7, cut=0, maximum=.45, border.width=1.5,
color=c("red", "green", "blue", "orange", "white"), title="ega walktrap")
cormatrix <- cor_auto(data)
group.spinglass<- list(c(1:7), c(8,17,18), c(9,12,13,14,19,20), c(10,11), c(15,16))
group.ega<- list(c(1:7), c(8,15,16), c(10,11), c(17,18,20), c(9,12:14,19))
par(mfrow = c(1, 2))
graph4 <- qgraph(cormatrix, graph="glasso", layout="spring", sampleSize = nrow(data),groups=group.ega,
vsize=7, cut=0, maximum=.45, border.width=1.5,
color=c("red", "green", "blue", "orange", "white"), title="ega walktrap")
graph5 <- qgraph(cormatrix, graph="glasso", layout="spring", sampleSize = nrow(data),groups=group.spinglass,
vsize=7, cut=0, maximum=.45, border.width=1.5,
color=c("red", "orange", "white", "blue", "green"), title="igraph spinglass")
devtools::install_github("mariodeng/FirebrowseR")
require(FirebrowseR)
cohorts = Metadata.Cohorts(format = "csv") # Download all available cohorts
View(cohorts)
cancer.Type = cohorts[grep("breast", cohorts$description, ignore.case = T), 1]
print(cancer.Type)
brca.Pats = Samples.Clinical(cohort = cancer.Type, format="tsv")
View(brca.Pats)
dim(brca.Pats)
all.Received = F
page.Counter = 1
page.size = 150
brca.Pats = list()
while(all.Received == F){
brca.Pats[[page.Counter]] = Samples.Clinical(format = "csv",
cohort = cancer.Type,
page_size = page.size,
page = page.Counter)
if(page.Counter > 1)
colnames(brca.Pats[[page.Counter]]) = colnames(brca.Pats[[page.Counter-1]])
if(nrow(brca.Pats[[page.Counter]]) < page.size){
all.Received = T
} else{
page.Counter = page.Counter + 1
}
}
brca.Pats = do.call(rbind, brca.Pats)
dim(brca.Pats)
View(brca.Pats)
brca.Pats = brca.Pats[ which(brca.Pats$vital_status == "dead"), ]
View(brca.Pats)
diff.Exp.Genes = c("ESR1", "GATA3", "XBP1", "FOXA1", "ERBB2", "GRB7", "EGFR",
"FOXC1", "MYC")
all.Found = F
page.Counter = 1
mRNA.Exp = list()
page.Size = 2000 # using a bigger page size is faster
while(all.Found == F){
mRNA.Exp[[page.Counter]] = Samples.mRNASeq(format = "csv",
gene = diff.Exp.Genes,
cohort = "BRCA",
tcga_participant_barcode =
brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
if(nrow(mRNA.Exp[[page.Counter]]) < page.Size)
all.Found = T
else
page.Counter = page.Counter + 1
}
mRNA.Exp = do.call(rbind, mRNA.Exp)
dim(mRNA.Exp)
mRNA.Exp = Samples.mRNASeq(gene = c("PTEN", "RUNX1"),
tcga_participant_barcode = c("TCGA-GF-A4EO",
"TCGA-AC-A2FG"),
format="tsv"
)
mRNA.Exp[, c("tcga_participant_barcode", "expression_log2", "z.score")]
all.Found = F
page.Counter = 1
mRNA.Exp = list()
page.Size = 2000 # using a bigger page size is faster
while(all.Found == F){
mRNA.Exp[[page.Counter]] = Samples.mRNASeq(format = "csv",
gene = diff.Exp.Genes,
cohort = "BRCA",
tcga_participant_barcode =
brca.Pats$tcga_participant_barcode,
page_size = page.Size,
page = page.Counter)
if(nrow(mRNA.Exp[[page.Counter]]) < page.Size)
all.Found = T
else
page.Counter = page.Counter + 1
}
mRNA.Exp = do.call(rbind, mRNA.Exp)
dim(mRNA.Exp)
mRNA.Exp = Samples.mRNASeq(gene = c("PTEN", "RUNX1"),
tcga_participant_barcode = c("TCGA-GF-A4EO",
"TCGA-AC-A2FG"),
format="tsv"
)
mRNA.Exp[, c("tcga_participant_barcode", "expression_log2", "z.score")]
View(mRNA.Exp)
library(ggplot2)
p = ggplot(mRNA.Exp, aes(factor(gene), z.score))
p +
geom_boxplot(aes(fill = factor(sample_type))) +
# we drop some outlier, so plot looks nicer, this also causes the warning
scale_y_continuous(limits = c(-1, 5)) +
scale_fill_discrete(name = "Tissue")
mRNA.Exp = Samples.mRNASeq(format = "csv",
gene = c("PTEN", "RUNX1"),
tcga_participant_barcode = c("TCGA-GF-A4EO",
"TCGA-AC-A2FG")
)
mRNA.Exp[, c("tcga_participant_barcode", "expression_log2", "z.score")]
library(STRINGdb)
STRINGdb$help(new())
STRINGdb$help("new")
string_db <- STRINGdb$new( version="10", species=9606,
score_threshold=0, input_directory="" )
STRINGdb$methods()
data(diff_exp_example1)
View(diff_exp_example1)
example1_mapped <- string_db$map( diff_exp_example1[,1], "gene", removeUnmappedRows = TRUE )
hits <- example1_mapped$STRING_id[1:200]
example1_mapped <- string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
x <- diff_exp_example1[,1]
x <- data.frame(diff_exp_example1[,1])
View(x)
example1_mapped <- string_db$map( diff_exp_example1[,3], "gene", removeUnmappedRows = TRUE )
example1_mapped <- string_db$map( data.frame(diff_exp_example1[,3]), "gene", removeUnmappedRows = TRUE )
example1_mapped <- string_db$map(x, "gene", removeUnmappedRows = TRUE )
View(x)
View(x)
x <- data.frame(diff_exp_example1[,3])
View(x)
View(diff_exp_example1)
colnames(x) <- "gene"
example1_mapped <- string_db$map(x, "gene", removeUnmappedRows = TRUE )
hits <- example1_mapped$STRING_id[1:200]
string_db$plot_network( hits )
example1_mapped_pval05 <- string_db$add_diff_exp_color( subset(example1_mapped, pvalue<0.05),
logFcColStr="logFC" )
string_db$plot_network( hits, payload_id=payload_id )
string_db$plot_ppi_enrichment( example1_mapped$STRING_id[1:1000], quiet=TRUE )
enrichmentGO <- string_db$get_enrichment( hits, category = "Process", methodMT = "fdr", iea = TRUE )
View(enrichmentGO)
library(org.Hs.eg.db)
library(annotate)
zz = Ontology(org.Hs.egGO)
zz = Ontology(GOTERM)
ConversionTable = toTable(org.Hs.egSYMBOL2EG)
View(ConversionTable)
ConversionTable = toTable(org.Hs.egSYMBOL)
View(ConversionTable)
ConversionTable = toTable(org.Hs.egGO)
View(ConversionTable)
ConversionTable = toTable(org.Hs.egGO2ALLEGS)
View(ConversionTable)
library(STRINGdb)
string_db <- STRINGdb$new( version="10", species=9606,
score_threshold=0, input_directory="" )
setwd("/Users/HezMac/Documents/workspaceEclipse/trapper2/src")
x <- read.table("../bpGOvsNumgene.tsv", row.names = 1) #row.names = 1
View(x)
View(x)
x <- read.table("../bpGOvsNumgene.tsv") #row.names = 1
View(x)
xGO <- x[x[,1]="GO:0001756",]
xGO <- x[x[,1]=="GO:0001756",]
View(xGO)
xGO <- x[x[,1] %in% "GO:0001756",]
xGO <- x[x[,1] %in% c("GO:0001756"),]
View(xGO)
xx <- read.table("../GObpALLvsid.tsv") #row.names = 1
View(xx)
xxx <- xx[xx[,2]=="GO:0001756",]
View(xxx)
y <- read.table("../GOidvsGeneSym.tsv") #row.names = 1
View(y)
View(xxx)
yy <- xxx[xxx$V1 %in% y$V1,]
View(yy)
yy <- y[y$V1 %in% y$V1,]
yy <- y[y$V1 %in% x$V1,]
yy <- y[y$V1 %in% xxx$V1,]
View(yy)
View(y)
View(xx)
xy <- xx[xx[,1]=="554",]
View(xy)
View(yy)
xxx <- xx[xx[,2]=="GO:0002576",]
View(xxx)
View(xxx)
yy <- y[y$V1 %in% xxx$V1,]
View(yy)
View(yy)
View(xx)
View(y)
View(xx)
yy <- xx[xx[,1]=="3638",]
View(yy)
allSchiz <- read.table("../goterm.tsv") #row.names = 1
xx <- read.table("../goterm.tsv") #row.names = 1
xx <- read.table("../goterm.txt") #row.names = 1
z <- read.table("../goterm.txt", sep = "'\t", row.names = FALSE) #row.names = 1
z <- read.table("../goterm.txt", sep = "'\t", row.names = FALSE, col.names = FALSE) #row.names = 1
z <- read.table("../goterm.txt", sep = "'\t", header = FALSE) #row.names = 1
z <- read.table("../goterm.txt", sep = "'\t", header = TRUE) #row.names = 1
z <- read.table("../goterm.txt", sep = "'\t", header = TRUE, fill = TRUE) #row.names = 1
z <- read.table("../goterm.txt", header = TRUE, fill = TRUE) #row.names = 1
z <- read.table("../goterm.txt", header = TRUE, fill = TRUE,comment.char = "") #row.names = 1
z <- read.csv("../goterm.txt", header = TRUE, fill = TRUE) #row.names = 1
View(z)
z <- read.csv("../goterm.txt", sep = "\t") #row.names = 1
z <- read.csv("../goterm.txt", sep = "\t", header = FALSE) #row.names = 1
View(yy)
View(z)
zy <- z[z$V2 %in% yy$V2,]
View(zy)
